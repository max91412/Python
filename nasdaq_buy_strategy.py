# -*- coding: utf-8 -*-
"""NASDAQ buy strategy.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wMv_eXGfqHmMYEfV8SpO6RG5fAvnt4HG
"""

import pandas as pd
import matplotlib.pyplot as plt
# S = 1; 1 day red, buy next day at opening and sell at close
# S = 2; 2 days red, buy next day at opening and sell at close
# S = 3; 3 days red, buy next day at opening and sell at close
# change parameter below according above description
S = 2

# Load data for the Nasdaq index
data = pd.read_csv("Data_SPX500.csv")

# Convert the "Open", "High", "Low", and "Close" columns to integers
data["Open"] = pd.to_numeric(data["Open"], errors="coerce")
data["High"] = pd.to_numeric(data["High"], errors="coerce")
data["Low"] = pd.to_numeric(data["Low"], errors="coerce")
data["Close"] = pd.to_numeric(data["Close"], errors="coerce")

# Set starting balance to 100
balance = 100
# Set starting units to zero
units = 0
# counter for trades
c = 0
# counter for days
i = 0
# Define the maximum number of trades
MAX_SIZE = 1000

# Allocate the array with the maximum size
trades_balance = [0] * MAX_SIZE
# Iterate through each day in the data
if S == 1:
  while i < len(data):
  # Check if the previous three days had a lower close price than open price
      if  data.iloc[i-1]["Close"] < data.iloc[i-1]["Open"]:     
        # Buy Nasdaq for the current day
        units = units + balance/data.iloc[i]["Open"]
        balance = balance - units*data.iloc[i]["Open"]
        # Sell Nasdaq at the end of the day
        balance = balance + units*data.iloc[i]["Close"]
        units = units - balance/data.iloc[i]["Close"]
        trades_balance[c] = (balance-100)     
        c += 1
        #jump to 2 days ahead
        i += 2     
      i += 1

if S == 2:
  while i < len(data):
  # Check if the previous three days had a lower close price than open price
      if  data.iloc[i-1]["Close"] < data.iloc[i-1]["Open"] and data.iloc[i-2]["Close"] < data.iloc[i-2]["Open"]:     
        # Buy Nasdaq for the current day
        units = units + balance/data.iloc[i]["Open"]
        balance = balance - units*data.iloc[i]["Open"]
        # Sell Nasdaq at the end of the day
        balance = balance + units*data.iloc[i]["Close"]
        units = units - balance/data.iloc[i]["Close"]
        trades_balance[c] = (balance-100)     
        c += 1
        #jump to 3 days ahead
        i += 3     
      i += 1

if S == 3:
  while i < len(data):
  # Check if the previous three days had a lower close price than open price
      if  data.iloc[i-1]["Close"] < data.iloc[i-1]["Open"] and data.iloc[i-2]["Close"] < data.iloc[i-2]["Open"] and data.iloc[i-3]["Close"] < data.iloc[i-3]["Open"]:     
        # Buy Nasdaq for the current day
        units = units + balance/data.iloc[i]["Open"]
        balance = balance - units*data.iloc[i]["Open"]
        # Sell Nasdaq at the end of the day
        balance = balance + units*data.iloc[i]["Close"]
        units = units - balance/data.iloc[i]["Close"]
        trades_balance[c] = (balance-100)     
        c += 1
        #jump to 4 days ahead
        i += 4     
      i += 1
  

# Use Matplotlib to plot the array of numbers
plt.plot(data)
plt.xlabel('Days')
plt.ylabel('Price of SPX500 in $')
plt.savefig("plot1.png", dpi=300)
# Show SPX price plot
plt.show()

###########################################################################

plt.plot(trades_balance[1:c])
plt.xlabel('Trade ID')
plt.ylabel('Return in %')
plt.savefig("plot2.png", dpi=300)
# Show return plot
plt.show()

